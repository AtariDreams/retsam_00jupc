//============================================================================================
/**
 * @file	syswork.h
 * @bfief	プログラム、スクリプトからアクセスされるシステムワーク操作
 * @author	Satoshi Nohara
 * @date	05.11.01
 */
//============================================================================================
#ifndef	__SYSWORK_H__
#define	__SYSWORK_H__


#include "field/eventflag.h"


//============================================================================================
//	ワーク定義
//
//	SysWork_...Set
//	SysWork_...Get
//	関数を作り、そこからアクセスするようにする
//
//============================================================================================
#include "syswork_def.h"


//============================================================================================
//
//	連れ歩きトレーナーID格納ワーク関連
//
//============================================================================================

//--------------------------------------------------------------------------------------------
/**
 * 連れ歩きトレーナーID格納ワークセット
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	no			トレーナーID
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_PairTrainerIDSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * 連れ歩きトレーナーID格納ワークゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"トレーナーID"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_PairTrainerIDGet( EVENTWORK* ev );


//============================================================================================
//
//	最初のポケモンナンバー関連
//
//============================================================================================

//--------------------------------------------------------------------------------------------
/**
 * 最初のポケモンナンバーセット
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	no			ポケモンナンバー
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_FirstPokeNoSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * 最初のポケモンナンバーゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"最初のポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_FirstPokeNoGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * ライバルのポケモンナンバーゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"ライバルのポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_RivalPokeNoGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * サポートのポケモンナンバーゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"サポートのポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_SupportPokeNoGet( EVENTWORK* ev );


//============================================================================================
//
//	コンテスト関連(後で対応を考える。。。)
//
//	コンテストは、受付マップから、オープニング会場マップへ切り替わるので、
//	スクリプトを終了すると、コンテストシステムのポインタが保持できないので、
//	セーブワークに保存している(暫定)
//
//============================================================================================

#if 0	//使用不可！
//--------------------------------------------------------------------------------------------
/**
 * コンテストシステムワークへのポインタセット
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	pwork		コンテストシステムワークへのポインタ
 *
 * @return	"TRUE"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_ContestAdrsSet( EVENTWORK* ev, void* pwork );

//--------------------------------------------------------------------------------------------
/**
 * コンテストシステムワークへのポインタ取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"最初のポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern void* SysWork_ContestAdrsGet( EVENTWORK* ev );
#endif


//--------------------------------------------------------------------------------------------
/**
 * 現在の記録を取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"個体値"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_OokisaRecordGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 記録を書き換える
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	no			個体値
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_OokisaRecordSet( EVENTWORK* ev, u16 no );


//============================================================================================
//
//	バトルサーチャー関連
//
//============================================================================================

//--------------------------------------------------------------------------------------------
/**
 * マップ遷移した時のリセット処理
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void Sys_BtlSearcherReset( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * バッテリーカウントを取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_BtlSearcherBatteryGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * バッテリーカウントをセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_BtlSearcherBatterySet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * クリアカウントを取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_BtlSearcherClearGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * クリアカウントをセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_BtlSearcherClearSet( EVENTWORK* ev, u16 no );


//============================================================================================
//
//			配布イベント関連
//
//============================================================================================


//------------------------------------------------------------------
/**
 * @brief	配布イベント：許可状態のセット
 * @param	ev			EVENTWORKへのポインタ
 * @param	haihu_id	配布イベントのID
 */
//------------------------------------------------------------------
extern void SysWork_HaihuEventWorkSet(EVENTWORK * ev, int haihu_id);

//------------------------------------------------------------------
/**
 * @brief	配布イベント：許可状態のクリア
 * @param	ev			EVENTWORKへのポインタ
 * @param	haihu_id	配布イベントのID
 */
//------------------------------------------------------------------
extern void SysWork_HaihuEventWorkClear(EVENTWORK * ev, int haihu_id);

//------------------------------------------------------------------
/**
 * @brief	配布イベント：許可状態の取得
 * @param	ev			EVENTWORKへのポインタ
 * @param	haihu_id	配布イベントのID
 * @return	BOOL		配布イベント許可のとき、TRUE
 */
//------------------------------------------------------------------
extern BOOL SysWork_HaihuEventWorkCheck(EVENTWORK * ev, int haihu_id);

//============================================================================================
//
//			隠しマップ関連
//
//============================================================================================

//--------------------------------------------------------------------------------------------
/**
 * @brief	隠しマップ：出現状態にする
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	hidemap_id	隠しマップのID（HIDEMAP_ID_〜、直値では０から３）
 */
//--------------------------------------------------------------------------------------------
extern void SysWork_HideMapWorkSet(EVENTWORK * ev, int hidemap_id);

//--------------------------------------------------------------------------------------------
/**
 * @brief	隠しマップ：隠蔽状態にする
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	hidemap_id	隠しマップのID（HIDEMAP_ID_〜、直値では０から３）
 */
//--------------------------------------------------------------------------------------------
extern void SysWork_HideMapWorkClear(EVENTWORK * ev, int hidemap_id);

//--------------------------------------------------------------------------------------------
/**
 * @brief	隠しマップ：出現状態をチェック
 *
 * @param	ev			EVENTWORKへのポインタ
 * @param	hidemap_id	隠しマップのID（HIDEMAP_ID_〜、直値では０から３）
 *
 * @retval	TRUE		出現している
 * @retval	FALSE		隠れている
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_HideMapWorkCheck(EVENTWORK * ev, int hidemap_id);

//--------------------------------------------------------------------------------------------
/**
 * 自然公園の総歩数クリア
 *
 * @param	ev			EVENTWORKへのポインタ
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_ParkWalkCountClear( EVENTWORK* ev);

//--------------------------------------------------------------------------------------------
/**
 * 自然公園の総歩数ゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"最初のポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_ParkWalkCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 自然公園の総歩数を＋１
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"最初のポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_ParkWalkCountPlus( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 新聞社締め切りカウンタを取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_NewsDaysCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 新聞社締め切りカウンタをセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_NewsDaysCountSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * 地下会話カウントを取得(ミカゲ専用)
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_UGTalkCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 地下会話カウントをセット(ミカゲ専用)
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_UGTalkCountSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * 地下会話カウントを取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_UGTalkCount2Get( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * 地下会話カウントをセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_UGTalkCount2Set( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
//			ポケモンクジ関連
//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------
/**
 * ポケモンクジ乱数に値をセット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void SysWork_pokelot_value_set( EVENTWORK* ev ,u32 val);

//--------------------------------------------------------------------------------------------
/**
 * ポケモンクジ乱数の値をゲット
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern u32 SysWork_pokelot_value_get(EVENTWORK* ev);

//--------------------------------------------------------------------------------------------
/**
 * ポケモンクジ乱数の値を初期化
 *  ゲーム開始時の初期化処理
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void SysWorkInitPokeLot(EVENTWORK* ev);

//--------------------------------------------------------------------------------------------
/**
 * ポケモンクジ乱数の値を初期化
 * 日数経過による更新処理
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void SysWorkUpdatePokeLot(SAVEDATA *sv,u16 days);

//--------------------------------------------------------------------------------------------
/**
 * レンチャン数をゲット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	カウント
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_RensyouCountGet( EVENTWORK* ev);

//--------------------------------------------------------------------------------------------
/**
 * レンチャン数をセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_RensyouCountSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 * １日１回、ポケモンのレベルと同じ数のとき、アイテムをくれるおじさん
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_PokeLevelNoGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 * １日１回、ポケモンのレベルと同じ数のとき、アイテムをくれるおじさん
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_PokeLevelNoSet( EVENTWORK* ev ,u16 no);

//--------------------------------------------------------------------------------------------
/**
 * １日１回、ポケモンのレベルと同じ数のとき、アイテムをくれるおじさん
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void SysWorkUpdatePokeLevelNo(SAVEDATA *sv);

//--------------------------------------------------------------------------------------------
/**
 *	デパート購入回数
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"最初のポケモンナンバー"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_RegularCountPlus( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 *	デパート購入回数
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_RegularCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 *	地下で道具をあげた人数の累計
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_UGToolGiveCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 *	地下で道具をあげた人数をセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_UGToolGiveCountSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 *	地下でかせきを掘った回数の累計
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_UGKasekiDigCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 *	地下でかせきを掘った回数をセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_UGKasekiDigCountSet( EVENTWORK* ev, u16 no );

//--------------------------------------------------------------------------------------------
/**
 *	地下でトラップにかけた回数の累計
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"カウント"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_UGTrapHitCountGet( EVENTWORK* ev );

//--------------------------------------------------------------------------------------------
/**
 *	地下でトラップにかけた回数をセット
 *
 * @param	ev		EVENTWORKへのポインタ
 * @param	no		セットカウント
 *
 * @return	"TRUE=セット出来た、FALSE=セット出来なかった"
 */
//--------------------------------------------------------------------------------------------
extern BOOL SysWork_UGTrapHitCountSet( EVENTWORK* ev, u16 no );


//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------
extern u16 SysWork_FriendlyStepCountGet(EVENTWORK * ev);
extern void SysWork_FriendlyStepCountSet(EVENTWORK * ev, u16 step);

//--------------------------------------------------------------
/**
 * PL 草ジム時刻セット
 * @param	ev	EVENTWORK *
 * @param	seq	時刻シーケンス
 * @retval	nothing
 */
//--------------------------------------------------------------
extern void SysWork_PLGrassGymTimeSeqSet( EVENTWORK *ev, u16 seq );

//--------------------------------------------------------------
/**
 * PL 草ジム時刻取得
 * @param	ev	EVENTWORK *
 * @retval	u16 時刻シーケンス
 */
//--------------------------------------------------------------
extern u16 SysWork_PLGrassGymTimeSeqGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * メイド用勝ち抜きターンセット
 *
 * @param	ev		EVENTWORK *
 * @param	turn	ターン数
 *
 * @retval	nothing
 */
//--------------------------------------------------------------
extern void SysWork_MaidWinTurnSet( EVENTWORK *ev, u16 turn );

//--------------------------------------------------------------
/**
 * メイド用勝ち抜きターン取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"ターン数"
 */
//--------------------------------------------------------------
extern u16 SysWork_MaidWinTurnGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * 別荘イベントナンバーセット
 *
 * @param	ev		EVENTWORK *
 * @param	no		イベントナンバー
 *
 * @retval	nothing
 */
//--------------------------------------------------------------
extern void SysWork_T07R0201Set( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * 別荘イベントナンバー取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"イベントナンバー"
 */
//--------------------------------------------------------------
extern u16 SysWork_EventT07R0201Get( EVENTWORK *ev );

//--------------------------------------------------------------------------------------------
/**
 * １日１回、別荘のイベント決定
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern void SysWorkUpdateEventT07R0201( SAVEDATA *sv );

//--------------------------------------------------------------------------------------------
/**
 * 記念プリントワークの状態を取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	none
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_MemoryPrintTower( EVENTWORK *ev );
extern u16 SysWork_MemoryPrintFactory( EVENTWORK *ev );
extern u16 SysWork_MemoryPrintStage( EVENTWORK *ev );
extern u16 SysWork_MemoryPrintCastle( EVENTWORK *ev );
extern u16 SysWork_MemoryPrintRoulette( EVENTWORK *ev );

//--------------------------------------------------------------------------------------------
/**
 * 破れた世界　イベント進行状況を取得
 * @param	ev		EVENTWORKのポインタ
 * @retval	"イベントナンバー"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_TornWorldEventSeqNoGet( EVENTWORK *ev );
extern void SysWork_TornWorldEventSeqNoSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * アルセウス　イベント進行状況をセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_AruseusuEventSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * アルセウス　イベント進行状況を取得
 * @param	ev	EVENTWORK *
 * @retval	"イベントナンバー"
 */
//--------------------------------------------------------------
extern u16 SysWork_AruseusuEventGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * シェイミ　イベント進行状況を取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"イベントナンバー"
 */
//--------------------------------------------------------------
extern u16 SysWork_SyeimiEventGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * シェイミ　イベント進行状況をセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_SyeimiEventSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * ムーバス　捕獲したかを取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"捕獲したか"
 */
//--------------------------------------------------------------
extern u16 SysWork_MuubasuGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * ムーバス　捕獲したかをセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_MuubasuSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * アイ　捕獲したかを取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"捕獲したか"
 */
//--------------------------------------------------------------
extern u16 SysWork_AiGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * アイ　捕獲したかをセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_AiSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * ファイヤー　捕獲したかを取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"捕獲したか"
 */
//--------------------------------------------------------------
extern u16 SysWork_FaiyaaGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * ファイヤー　捕獲したかをセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_FaiyaaSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * サンダー　捕獲したかを取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"捕獲したか"
 */
//--------------------------------------------------------------
extern u16 SysWork_SandaaGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * サンダー　捕獲したかをセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_SandaaSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * フリーザー　捕獲したかを取得
 *
 * @param	ev	EVENTWORK *
 *
 * @retval	"捕獲したか"
 */
//--------------------------------------------------------------
extern u16 SysWork_HuriizaaGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * フリーザー　捕獲したかをセット
 * @param	ev	EVENTWORK *
 * @param	no	"イベントナンバー"
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_HuriizaaSet( EVENTWORK *ev, u16 no );

//--------------------------------------------------------------
/**
 * 移動ポケモン　ワークセット
 *
 * @param	ev	EVENTWORK *
 * @param	monsno	モンスターナンバー
 * @param	num		ワークにセットする値
 *
 * @retval	non
 *
 * num = 2 倒した
 * num = 1 捕獲した
 */
//--------------------------------------------------------------
extern void SysWork_MovePokeWorkSet( EVENTWORK* ev, u16 monsno, u16 num );

//--------------------------------------------------------------
/**
 * 破れた世界 アカギ出現フラグ取得
 * @param	ev	EVENTWORK *
 * @retval	u16	フラグ内容
 */
//--------------------------------------------------------------
extern u16 SysWork_TwAkagiAppearFlagGet( EVENTWORK *ev );

//--------------------------------------------------------------
/**
 * 破れた世界 アカギ出現フラグセット
 * @param	ev	EVENTWORK *
 * @param	set	セット番号
 * @retval	non
 */
//--------------------------------------------------------------
extern void SysWork_TwAkagiAppearFlagSet( EVENTWORK *ev, u16 set );

//--------------------------------------------------------------------------------------------
/**
 * WIFIフロンティアのTEMPクリアフラグ取得
 *
 * @param	ev		EVENTWORKのポインタ
 *
 * @return	"0=クリアしていない、1=クリアしている"
 */
//--------------------------------------------------------------------------------------------
extern u16 SysWork_WifiFrClearFlagGet( EVENTWORK* ev );


#endif	//__SYSWORK_H__


