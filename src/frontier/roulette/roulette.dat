//==============================================================================
/**
 * @file	roulette.dat
 * @brief	バトルルーレットデータ
 * @author	nohara
 * @date	2007.09.05
 */
//==============================================================================

#include "itemtool/itemsym.h"


//==============================================================================================
//
//	カーソル移動速度([3]の要素数真ん中が基準の速度)
//
//==============================================================================================
static const u8 csr_wait_tbl[CSR_WAIT_TBL_MAX][2] = {
	//ウェイト、滑りパネルの数
	{ 20,		0 },			//0:遅い
	{ 16,		0 },			//1:
	{ 8,		0 },			//2:
	{ 4,		0 },			//3:基準の速度
	{ 3,		0 },			//4:
	{ 2,		0 },			//5:
	{ 1,		0 },			//6:
	{ 0,		0 },			//7:早い
};


//==============================================================================
//
//	イベント出現周回数
//
//	イベント定義の並びとテーブルの並びを一致させているので注意！
//
//==============================================================================
typedef struct{
	u8	flag1:1;		//周回数1
	u8	flag2:1;		//周回数2
	u8	flag3:1;		//周回数3
	u8	flag4:1;		//周回数4
	u8	flag5:1;		//周回数5
	u8	flag6:1;		//周回数6
	u8	flag7:1;		//周回数7-
	u8	flag8:1;		//余り
}ROULETTE_EV_APPEAR;

static const ROULETTE_EV_APPEAR roulette_ev_appear_tbl[] = {
//周回1  2  3  4  5  6  7  dmy		//イベントパネル
//--------------------------------------------
	{ 0, 1, 1, 1, 1, 1, 1, 0 },		//HP        0:敵
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//どく
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//まひ
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//やけど
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//ねむり
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//こおり
	{ 1, 1, 1, 0, 0, 0, 1, 0 },		//きのみ
	{ 0, 0, 0, 1, 1, 1, 1, 0 },		//アイテム
	{ 0, 1, 1, 1, 1, 1, 1, 0 },		//LV
	///////////////////////////
	{ 0, 1, 1, 1, 1, 1, 1, 0 },		//HP        9:味方
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//どく
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//まひ
	{ 1, 0, 1, 0, 0, 0, 1, 0 },		//やけど
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//ねむり
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//こおり
	{ 1, 1, 1, 0, 0, 0, 1, 0 },		//きのみ
	{ 0, 0, 0, 1, 1, 1, 1, 0 },		//アイテム
	{ 0, 1, 1, 1, 1, 1, 1, 0 },		//LV
	///////////////////////////
	{ 0, 1, 1, 0, 0, 0, 1, 0 },		//晴れ      18:場に効果
	{ 0, 1, 1, 0, 0, 0, 1, 0 },		//雨
	{ 0, 1, 1, 0, 0, 0, 1, 0 },		//砂嵐
	{ 0, 1, 1, 0, 0, 0, 1, 0 },		//あられ
	{ 0, 0, 0, 1, 0, 1, 1, 0 },		//霧
	{ 0, 0, 0, 1, 0, 1, 1, 0 },		//トリック
	{ 1, 1, 1, 1, 1, 1, 1, 0 },		//SPD UP
	{ 1, 1, 1, 0, 0, 0, 1, 0 },		//SPD DOWN
	{ 1, 1, 1, 1, 1, 1, 1, 0 },		//RANDOM
	///////////////////////////
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//チェンジ  27:特殊
	{ 0, 0, 0, 1, 1, 1, 1, 0 },		//BPsmall   28
	{ 0, 0, 0, 0, 1, 1, 1, 0 },		//勝利      29
	{ 1, 1, 1, 1, 1, 1, 1, 0 },		//スカ      30
	{ 0, 0, 0, 0, 0, 0, 1, 0 },		//BPbig     31
};
#define ROULETTE_EV_APPEAR_MAX	( NELEMS(roulette_ev_appear_tbl) )


//==============================================================================
//
//	イベント出現挑戦数
//
//==============================================================================
typedef struct{
	u8	flag1:1;		//戦闘回数1
	u8	flag2:1;		//戦闘回数2
	u8	flag3:1;		//戦闘回数3
	u8	flag4:1;		//戦闘回数4
	u8	flag5:1;		//戦闘回数5
	u8	flag6:1;		//戦闘回数6
	u8	flag7:1;		//戦闘回数7
	u8	flag8:1;		//余り
}ROULETTE_EV_CHALLENGE;

//アクセス定義(プログラムでswitchを対応させないとダメ)
enum{
	ROULETTE_EV_CHALLENGE_POKE_CHANGE = 0,
	ROULETTE_EV_CHALLENGE_SPEED_UP,
	ROULETTE_EV_CHALLENGE_SPEED_DOWN,
	ROULETTE_EV_CHALLENGE_RANDOM,
	ROULETTE_EV_CHALLENGE_BP_GET,
	ROULETTE_EV_CHALLENGE_BTL_WIN,
	ROULETTE_EV_CHALLENGE_BP_GET_BIG,
	ROULETTE_EV_CHALLENGE_MAX,
};

static const ROULETTE_EV_CHALLENGE roulette_ev_challenge_tbl[ROULETTE_EV_CHALLENGE_MAX] = {
//戦闘1  2  3  4  5  6  7  dmy		//イベントパネル
//-------------------------------------------------------
	{ 1, 1, 1, 1, 1, 1, 0, 0 },		//ポケモンチェンジ
	{ 1, 1, 1, 1, 1, 1, 0, 0 },		//スピードアップ
	{ 1, 1, 1, 1, 1, 1, 0, 0 },		//スピードダウン
	{ 1, 1, 1, 1, 1, 1, 0, 0 },		//ランダム
	{ 1, 0, 1, 0, 1, 0, 0, 0 },		//BPゲット
	{ 0, 1, 0, 1, 0, 1, 0, 0 },		//戦闘スルー
	{ 0, 1, 0, 1, 0, 1, 0, 0 },		//BPゲット大
};


//==============================================================================
//
//	ポイントとカテゴリ選択確立
//
//	パネルの色定義と一致したテーブル！
//
//==============================================================================
static const u8 roulette_category_tbl[][ROULETTE_PANEL_COLOR_MAX] = {
	//赤、黒、白、黄		//ポイント
	{ 15, 15, 40, 30 },		//21-
	{ 35, 20, 30, 15 },		//16-20
	{ 30, 30, 35,  5 },		//10-15
	{ 25, 40, 30,  5 },		//5-10
	{ 10, 75, 10,  5 },		//0-4
};
#define ROULETTE_CATEGORY_TBL_MAX	( NELEMS(roulette_category_tbl) )

//ランクを決めるポイント数
static const u8 roulette_point_tbl[] = {
	21, 16, 10, 5,		//ポイント
};
#define ROULETTE_POINT_TBL_MAX	( NELEMS(roulette_point_tbl) )


